% Suelynn analysis development script

function TE = makeTE_posner6(TE, sessions)
    if nargin < 2    
        sessions = bpLoadSessions;
    end
%% make structure with many different fields, e.g. trialNumber, trialOutcome, reactiontime, etc.
% every field in this structure should be either a numeric array with numRows
% (dimension 1) == nTrials OR a cell array with the same criteria

% find total number of trials acrosss selected sesssions
scounter = zeros(size(sessions));
for i = 1:length(sessions)
    scounter(i) = sessions(i).SessionData.nTrials;
end
nTrials = sum(scounter);


if nargin < 1 || isempty(TE) % initialize from scratch (reload)
    startIndex = 1;
    %by default, TE... filled with NaN unless conditions are met
    TE = struct(...
        'filename', {},... 
        'trialNumber', zeros(nTrials, 1),...
        'trialType', zeros(nTrials, 1),...  % e.g. left or right
        'validTrial', zeros(nTrials, 1),...
        'invalidTrial', zeros(nTrials, 1),...
        'foreperiod', zeros(nTrials, 1),...
        'trialOutcome', NaN(nTrials, 1),...  % e.g.  correct = 1, incorrect = 0
        'reactionTime', NaN(nTrials, 1),... % involve sutracting two numbers dug out of session.SessionData.RawEvents.Trial{1}
        'reactionTimeMoving', NaN(nTrials, 1),...
        'reactionTimeSimple', NaN(nTrials, 1),...
        'sessionIndex', NaN(nTrials, 1),...
        'sessionChange', NaN(nTrials, 1),...]
        'TrialStartTimeStamp', zeros(nTrials, 1)...
        );
    
        TE(1).TargetLightOn = bpAddStateAsTrialEvent(sessions, 'TargetLightOn'); %states needed to calculate RT
        TE(1).Port2Out = bpAddEventAsTrialEvent(sessions, 'Port2Out'); %in session.SessionData.Trial{}.Events.'Port2Out'
        TE(1).Drinking = bpAddStateAsTrialEvent(sessions, 'Drinking');
        TE(1).Punish = bpAddStateAsTrialEvent(sessions, 'Punish');
        TE(1).PunishWithdrawal = bpAddStateAsTrialEvent(sessions, 'PunishWithdrawal');
        TE(1).EarlyWithdrawalCue = bpAddStateAsTrialEvent(sessions, 'EarlyWithdrawalCue');
        TE(1).EarlyWithdrawalFP = bpAddStateAsTrialEvent(sessions, 'EarlyWithdrawalFP');
        TE(1).RightRewardDelay = bpAddStateAsTrialEvent(sessions, 'RightRewardDelay');
        TE(1).LeftRewardDelay = bpAddStateAsTrialEvent(sessions, 'LeftRewardDelay');


    TE.filename = cell(nTrials, 1);
else
    startIndex = length(TE.filename);
    % extend all fields from startIndex
    TE.filename{startIndex + nTrials} = ''; % automatically extend
    TE.trialNumber = [TE.trialNumber ; zeros(nTrials, 1)];
    TE.trialType = [TE.trialType; zeros(nTrials, 1)];  % e.g. left or right
    TE.validTrial = [TE.validTrial; zeros(nTrials, 1)];  % e.g. left or right
    TE.invalidTrial= [TE.invalidTrial; NaN(nTrials, 1)];  % e.g. left or right
    TE.trialOutcome = [TE.trialOutcome; NaN(nTrials, 1)];  % e.g.  correct = 1, incorrect = 0
    TE.reactionTime = [TE.reactionTime; NaN(nTrials, 1)]; % involve sutracting two numbers dug out of session.SessionData.RawEvents.Trial{1}
    TE.reactionTimeMoving = [TE.reactionTimeMoving; NaN(nTrials, 1)]; 
    TE.reactionTimeSimple = [TE.reactionTimeSimple; NaN(nTrials, 1)];     
    TE.foreperiod = [TE.foreperiod; NaN(nTrials, 1)];
    TE.sessionIndex = [TE.sessionIndex; NaN(nTrials, 1)];
    TE.sessionChange = [TE.sessionChange; NaN(nTrials, 1)];
end


    


tcounter = 1;
for sCounter = 1:length(sessions)
    session = sessions(sCounter);
        
    for counter = 1:session.SessionData.nTrials
        
        % stuff for all trials
        
        %For ITI calculation    
        TE.TrialStartTimeStamp(tcounter)= session.SessionData.TrialStartTimestamp(counter);
        TE.trialType(tcounter) = session.SessionData.Transf(counter);
        
        if   TE.trialType(tcounter) == 1 || TE.trialType(tcounter) == 2 %sort trial types into valid/invalid trials
             TE.validTrial(tcounter)=1;
             TE.invalidTrial(tcounter)=0;
        else
             TE.validTrial(tcounter)=0;
             TE.invalidTrial(tcounter)=1;
        end
                      
        TE.filename{tcounter} = session.filename;
        TE.trialNumber(tcounter) = counter;
        TE.foreperiod(tcounter)= session.SessionData.TrialSettings(counter).foreperiod; %foreperiod+cuedelay+lighton=total time in center port
        TE.CueDelay(tcounter)= session.SessionData.TrialSettings(counter).foreperiod;
        TE.LightOn(tcounter)= session.SessionData.TrialSettings(counter).foreperiod;
        
        TE.Port2In(tcounter)=length(SessionData.RawEvents.Trial{1,counter}.Events.Port2In);

        tcounter = tcounter + 1; % don't forget :) 
    end
end
    

%% make session index and session change    
sessionNames = unique(TE.filename);
for counter = 1:length(sessionNames)
    sname = sessionNames{counter};
    TE.sessionIndex(cellfun(@(x) strcmp(x, sname), TE.filename)) = counter;
end
TE.sessionChange = [0 diff(TE.sessionIndex)]'; % make it a column vector

%% make trial outcomes

TE.trialOutcome = NaN(length(TE.filename), 1);
targetLightNotReached = filterTECell(TE, 'TargetLightOn', NaN); % a logical array
punishReached  = ~filterTECell(TE, 'Punish', NaN);
drinkingReached= ~filterTECell(TE, 'Drinking', NaN);
TE.trialOutcome(targetLightNotReached) = NaN; % early withdrawal
TE.trialOutcome(~targetLightNotReached & punishReached) = 0;
TE.trialOutcome(drinkingReached)=1;

%% reaction times
% because Target Light On (TLO) is NaN for early withdrawal trials,
% reaction times will be NaN for these trials as calculated below:
for counter = 1:length(TE.filename)
    if counter == 1530
        disp('WTF');
    end
    TLO = TE.TargetLightOn{counter}(1);
    P2Out = TE.Port2Out{counter};
    reactionTimeSimple_unfiltered = P2Out - TLO;
    reactionTimeSimple_unfiltered(reactionTimeSimple_unfiltered <= 0) = inf;
    reactionTimeSimple = min(reactionTimeSimple_unfiltered);
    if isempty(P2Out)
        reactionTimeSimple = NaN;
    end
    
    if ~isnan(TE.LeftRewardDelay{counter}(1))
        sideIn = TE.LeftRewardDelay{counter}(1);
    elseif ~isnan(TE.RightRewardDelay{counter}(1))
        sideIn = TE.RightRewardDelay{counter}(1);
    elseif ~isnan(TE.Drinking{counter}(1))
        sideIn = TE.Drinking{counter}(1);
    else
        sideIn = TE.Punish{counter}(1);
    end
    
        
    TE.reactionTimeSimple(counter) = reactionTimeSimple(1);
    TE.reactionTime(counter) = sideIn - TLO;
    TE.reactionTimeMoving(counter) = TE.reactionTime(counter)-TE.reactionTimeSimple(counter);
    
%     %hack to approximate simple reactiontime for protocols that allowed a grace
%     %period
%         if TE.reactionTimeSimple(counter) >= TE.reactionTime(counter) || TE.reactionTimeSimple(counter)<0
%  
%            TE.reactionTimeSimple(counter)=min(abs(P2Out - TLO));
%            TE.reactionTimeMoving(counter)=TE.reactionTime(counter);
%            TE.reactionTime(counter)=TE.reactionTime(counter)+TE.reactionTimeSimple(counter);
%         end
                
end
end
    




%%
% 
%         if TE.trialType(tcounter) == 1 || TE.trialType(tcounter) == 2 %sort trial types into valid/invalid trials
%              TE.validTrial(tcounter)=1;
%              TE.invalidTrial(tcounter)=0;
%         else
%              TE.validTrial(tcounter)=0;
%              TE.invalidTrial(tcounter)=1;
%         end
% 
%          if ~isnan(session.SessionData.RawEvents.Trial{1,counter}.States.Drinking(1)) && TE.validTrial(tcounter)==1
%             TE.valid_outcome(tcounter) = 1;
% 
%          elseif ~isnan(session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1)) && TE.validTrial(tcounter)==1 
% 
%             TE.valid_outcome(tcounter) = 0;
%         %filters out early withdrawal during Cue
%             if session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1)== session.SessionData.RawEvents.Trial{1,counter}.States.EarlyWithdrawalCue(end)
%                 TE.valid_outcome(tcounter) = NaN;
%         %filters out early withdrawal during foreperiod
%             elseif session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1)== session.SessionData.RawEvents.Trial{1,counter}.States.EarlyWithdrawalFP(end)
%                 TE.valid_outcome(tcounter) = NaN;
%             end
%             
%          elseif ~isnan(session.SessionData.RawEvents.Trial{1,counter}.States.Drinking(1))  && TE.validTrial(tcounter)==0
%              TE.invalid_outcome(tcounter)=1;
%          elseif ~isnan(session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1))  && TE.validTrial(tcounter)==0
%              TE.invalid_outcome(tcounter) = 0;
% 
%              if session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1)== session.SessionData.RawEvents.Trial{1,counter}.States.EarlyWithdrawalCue(end)
%                      TE.invalid_outcome(tcounter) = NaN;
%              elseif session.SessionData.RawEvents.Trial{1,counter}.States.Punish(1)== session.SessionData.RawEvents.Trial{1,counter}.States.EarlyWithdrawalFP(end)
%                      TE.invalid_outcome(tcounter) = NaN;
%              end
% 
%          end
